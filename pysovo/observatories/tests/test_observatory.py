import unittest
from test_data import *

class TestLST(unittest.TestCase):
    def setUp(self):
        self.site = greenwich()
        
    def test_local_sidereal_time(self):
        
        #Greenwich LST at V.E. (h:m:s) = 17:6:32  approx
        known_lst1 = 17.1096992
        #12 hours later:
        known_lst2 = 5.1425530145722549
        
        lst1 = self.site.localSiderialTime(vernal_equinox_2012)
        self.assertAlmostEqual(lst1, known_lst1)
        
        lst2 = self.site.localSiderialTime(vernal_equinox_2012 + datetime.timedelta(hours=12))
        self.assertAlmostEqual(lst2 , known_lst2)
        

class TestRSTFunctionality(unittest.TestCase):
    def setUp(self):
        self.site = greenwich()

    def test_appropriate_astropysics_version(self):
        #NB the most recent astropysics version as of 23rd March has broken rst functionality.
        #(Due to Erik adding a feature I requested. Oops). 
        r,s,t = self.site.riseSetTransit(eqpos = equatorial_on_sky_ve,
                                          date = vernal_equinox_2012,
                                          timeobj=True,
                                          utc=True
                                          )
        assert isinstance(t, datetime.time)
            
    def test_equatorial_target(self):
        #NB these were simply generated by desk-checking current (sensible looking) output
        #So it's currently just a regression test
        #TO DO: Implement a cross-check against pyephem functionality.
        known_answers = [[ "2012-03-19 23:14:56.066387+00:00",
                           "2012-03-20 11:12:58.114168+00:00",
                           "2012-03-20 05:13:57.090277+00:00" ],
                         ["2012-03-21 11:09:02.212705+00:00",
                          "2012-03-21 23:07:04.260487+00:00",
                          "2012-03-21 17:08:03.236596+00:00"]]
        test_results = []
        for pos in equatorial_on_sky_ve, equatorial_off_sky_ve:
            r,s,t = self.site.next_riseSetTransit(eqpos = pos,
                                          specific_time = vernal_equinox_2012
                                          )
            #Set will always be later than the current time
            self.assertTrue(s > vernal_equinox_2012) 
            test_results.append([str(r),str(s),str(t)])
        
#        print test_results
        self.assertEqual(known_answers, test_results)

        
    def test_always_visible_target(self):
        known_transits = ['2012-03-21 05:10:01.188815+00:00', 
                          '2012-03-20 17:11:59.138059+00:00']
        test_results = []
        for pos in circumpolar_north_transit_at_ve, circumpolar_north_transit_later:
            r,s,t = self.site.next_riseSetTransit(eqpos = pos,
                                          specific_time = vernal_equinox_2012
                                          )
            self.assertEqual(r, None)
            self.assertEqual(s, None)
            test_results.append(str(t))
#        print test_results
        self.assertEqual(known_transits, test_results)
        
    def test_never_visible_target(self):
        known = [None, None, None]
        for t in vernal_equinox_2012,  vernal_equinox_2012 + datetime.timedelta(hours=12):
            r,s,t = self.site.next_riseSetTransit(eqpos=southern_hemisphere,
                                                  specific_time=t)
            
            self.assertEqual( [r,s,t], known)
        
        
class TestOnSkyFunctionality(unittest.TestCase):
    def setUp(self):
        self.site = greenwich()
        
    def test_equatorial_target(self):
        known_answers = [[True, False], #RA=current LST on sky now, RA=current LST on sky in 12 hrs
                         [False, True]] #RA+12 now, in 12 hrs
        test_results = []
        for pos in equatorial_on_sky_ve, equatorial_off_sky_ve:
            pos_results=[]
            for t in vernal_equinox_2012, vernal_equinox_2012 + datetime.timedelta(hours=12):
                pos_results.append( self.site.on_sky(eqpos=pos,
                                                     specific_time=t))
            test_results.append(pos_results)
                
        self.assertEqual(known_answers, test_results)

        
    def test_always_visible_target(self):
        known = [True,True]
        test_results = []
        for t in vernal_equinox_2012,  vernal_equinox_2012 + datetime.timedelta(hours=12):
            test_results.append(self.site.on_sky(eqpos=circumpolar_north_transit_at_ve,
                                                 specific_time=t))
        self.assertEqual(known, test_results)
        
    def test_never_visible_target(self):
        known = [False,False]
        test_results = []
        for t in vernal_equinox_2012,  vernal_equinox_2012 + datetime.timedelta(hours=12):
            test_results.append(self.site.on_sky(eqpos=southern_hemisphere,
                                                 specific_time=t))
        self.assertEqual(known, test_results)
        

